import { GraphQLResolveInfo } from "graphql";
import { AggregateTeacherArgs } from "./args/AggregateTeacherArgs";
import { CreateManyTeacherArgs } from "./args/CreateManyTeacherArgs";
import { CreateTeacherArgs } from "./args/CreateTeacherArgs";
import { DeleteManyTeacherArgs } from "./args/DeleteManyTeacherArgs";
import { DeleteTeacherArgs } from "./args/DeleteTeacherArgs";
import { FindFirstTeacherArgs } from "./args/FindFirstTeacherArgs";
import { FindManyTeacherArgs } from "./args/FindManyTeacherArgs";
import { FindUniqueTeacherArgs } from "./args/FindUniqueTeacherArgs";
import { GroupByTeacherArgs } from "./args/GroupByTeacherArgs";
import { UpdateManyTeacherArgs } from "./args/UpdateManyTeacherArgs";
import { UpdateTeacherArgs } from "./args/UpdateTeacherArgs";
import { UpsertTeacherArgs } from "./args/UpsertTeacherArgs";
import { Teacher } from "../../../models/Teacher";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTeacher } from "../../outputs/AggregateTeacher";
import { TeacherGroupBy } from "../../outputs/TeacherGroupBy";
export declare class TeacherCrudResolver {
    teacher(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTeacherArgs): Promise<Teacher | null>;
    findFirstTeacher(ctx: any, info: GraphQLResolveInfo, args: FindFirstTeacherArgs): Promise<Teacher | null>;
    teachers(ctx: any, info: GraphQLResolveInfo, args: FindManyTeacherArgs): Promise<Teacher[]>;
    createTeacher(ctx: any, info: GraphQLResolveInfo, args: CreateTeacherArgs): Promise<Teacher>;
    createManyTeacher(ctx: any, info: GraphQLResolveInfo, args: CreateManyTeacherArgs): Promise<AffectedRowsOutput>;
    deleteTeacher(ctx: any, info: GraphQLResolveInfo, args: DeleteTeacherArgs): Promise<Teacher | null>;
    updateTeacher(ctx: any, info: GraphQLResolveInfo, args: UpdateTeacherArgs): Promise<Teacher | null>;
    deleteManyTeacher(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTeacherArgs): Promise<AffectedRowsOutput>;
    updateManyTeacher(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTeacherArgs): Promise<AffectedRowsOutput>;
    upsertTeacher(ctx: any, info: GraphQLResolveInfo, args: UpsertTeacherArgs): Promise<Teacher>;
    aggregateTeacher(ctx: any, info: GraphQLResolveInfo, args: AggregateTeacherArgs): Promise<AggregateTeacher>;
    groupByTeacher(ctx: any, info: GraphQLResolveInfo, args: GroupByTeacherArgs): Promise<TeacherGroupBy[]>;
}
