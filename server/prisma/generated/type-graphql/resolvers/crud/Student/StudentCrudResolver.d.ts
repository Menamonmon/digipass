import { GraphQLResolveInfo } from "graphql";
import { AggregateStudentArgs } from "./args/AggregateStudentArgs";
import { CreateManyStudentArgs } from "./args/CreateManyStudentArgs";
import { CreateStudentArgs } from "./args/CreateStudentArgs";
import { DeleteManyStudentArgs } from "./args/DeleteManyStudentArgs";
import { DeleteStudentArgs } from "./args/DeleteStudentArgs";
import { FindFirstStudentArgs } from "./args/FindFirstStudentArgs";
import { FindManyStudentArgs } from "./args/FindManyStudentArgs";
import { FindUniqueStudentArgs } from "./args/FindUniqueStudentArgs";
import { GroupByStudentArgs } from "./args/GroupByStudentArgs";
import { UpdateManyStudentArgs } from "./args/UpdateManyStudentArgs";
import { UpdateStudentArgs } from "./args/UpdateStudentArgs";
import { UpsertStudentArgs } from "./args/UpsertStudentArgs";
import { Student } from "../../../models/Student";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateStudent } from "../../outputs/AggregateStudent";
import { StudentGroupBy } from "../../outputs/StudentGroupBy";
export declare class StudentCrudResolver {
    student(ctx: any, info: GraphQLResolveInfo, args: FindUniqueStudentArgs): Promise<Student | null>;
    findFirstStudent(ctx: any, info: GraphQLResolveInfo, args: FindFirstStudentArgs): Promise<Student | null>;
    students(ctx: any, info: GraphQLResolveInfo, args: FindManyStudentArgs): Promise<Student[]>;
    createStudent(ctx: any, info: GraphQLResolveInfo, args: CreateStudentArgs): Promise<Student>;
    createManyStudent(ctx: any, info: GraphQLResolveInfo, args: CreateManyStudentArgs): Promise<AffectedRowsOutput>;
    deleteStudent(ctx: any, info: GraphQLResolveInfo, args: DeleteStudentArgs): Promise<Student | null>;
    updateStudent(ctx: any, info: GraphQLResolveInfo, args: UpdateStudentArgs): Promise<Student | null>;
    deleteManyStudent(ctx: any, info: GraphQLResolveInfo, args: DeleteManyStudentArgs): Promise<AffectedRowsOutput>;
    updateManyStudent(ctx: any, info: GraphQLResolveInfo, args: UpdateManyStudentArgs): Promise<AffectedRowsOutput>;
    upsertStudent(ctx: any, info: GraphQLResolveInfo, args: UpsertStudentArgs): Promise<Student>;
    aggregateStudent(ctx: any, info: GraphQLResolveInfo, args: AggregateStudentArgs): Promise<AggregateStudent>;
    groupByStudent(ctx: any, info: GraphQLResolveInfo, args: GroupByStudentArgs): Promise<StudentGroupBy[]>;
}
