import { GraphQLResolveInfo } from "graphql";
import { AggregateClassroomArgs } from "./args/AggregateClassroomArgs";
import { CreateClassroomArgs } from "./args/CreateClassroomArgs";
import { CreateManyClassroomArgs } from "./args/CreateManyClassroomArgs";
import { DeleteClassroomArgs } from "./args/DeleteClassroomArgs";
import { DeleteManyClassroomArgs } from "./args/DeleteManyClassroomArgs";
import { FindFirstClassroomArgs } from "./args/FindFirstClassroomArgs";
import { FindManyClassroomArgs } from "./args/FindManyClassroomArgs";
import { FindUniqueClassroomArgs } from "./args/FindUniqueClassroomArgs";
import { GroupByClassroomArgs } from "./args/GroupByClassroomArgs";
import { UpdateClassroomArgs } from "./args/UpdateClassroomArgs";
import { UpdateManyClassroomArgs } from "./args/UpdateManyClassroomArgs";
import { UpsertClassroomArgs } from "./args/UpsertClassroomArgs";
import { Classroom } from "../../../models/Classroom";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateClassroom } from "../../outputs/AggregateClassroom";
import { ClassroomGroupBy } from "../../outputs/ClassroomGroupBy";
export declare class ClassroomCrudResolver {
    classroom(ctx: any, info: GraphQLResolveInfo, args: FindUniqueClassroomArgs): Promise<Classroom | null>;
    findFirstClassroom(ctx: any, info: GraphQLResolveInfo, args: FindFirstClassroomArgs): Promise<Classroom | null>;
    classrooms(ctx: any, info: GraphQLResolveInfo, args: FindManyClassroomArgs): Promise<Classroom[]>;
    createClassroom(ctx: any, info: GraphQLResolveInfo, args: CreateClassroomArgs): Promise<Classroom>;
    createManyClassroom(ctx: any, info: GraphQLResolveInfo, args: CreateManyClassroomArgs): Promise<AffectedRowsOutput>;
    deleteClassroom(ctx: any, info: GraphQLResolveInfo, args: DeleteClassroomArgs): Promise<Classroom | null>;
    updateClassroom(ctx: any, info: GraphQLResolveInfo, args: UpdateClassroomArgs): Promise<Classroom | null>;
    deleteManyClassroom(ctx: any, info: GraphQLResolveInfo, args: DeleteManyClassroomArgs): Promise<AffectedRowsOutput>;
    updateManyClassroom(ctx: any, info: GraphQLResolveInfo, args: UpdateManyClassroomArgs): Promise<AffectedRowsOutput>;
    upsertClassroom(ctx: any, info: GraphQLResolveInfo, args: UpsertClassroomArgs): Promise<Classroom>;
    aggregateClassroom(ctx: any, info: GraphQLResolveInfo, args: AggregateClassroomArgs): Promise<AggregateClassroom>;
    groupByClassroom(ctx: any, info: GraphQLResolveInfo, args: GroupByClassroomArgs): Promise<ClassroomGroupBy[]>;
}
